openapi: 3.0.1
info:
  title: Sample API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: 'http://localhost:9999/v1'

components:
  # data elements (JSON Schema)
  schemas:
    bottleDTO:
      type: object
      required:
        - name
      properties:
        id:
          type: number
        name:
          type: string
        volumn:
          type: number
        isAlcoholic:
          type: boolean
        volumePercent:
          type: number
        price:
          type: number
        supplier:
          type: string
        inStock:
          type: number
        href:
          type: string
    bottleUpdateDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        volumn:
          type: number
        isAlcoholic:
          type: boolean
        volumePercent:
          type: number
        price:
          type: number
        supplier:
          type: string
        inStock:
          type: number
    errorMessage:
      type: object
      required:
        - errorType
      properties:
        errorType:
          description: error category, should be extended
          enum:
            - INVALID_PARAMETER
        message:
          type: string
          description: A detailed error description

paths:

  /beverage/bottles:
    get:
      summary: Get all bottles (no pagination)
      responses:
        200:
          description: Get all bottles without pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bottleDTO"

  /beverage/addBottle:
    post:
      summary: Create a movie
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bottleDTO"
      responses:
        201:
          description: Bottle created
        400:
          description: Message body was empty
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /beverage/bottle/{bottleId}:
    parameters:
      - name: bottleId
        # path parameters must be always mandatory!!
        required: true
        in: path
        schema:
          type: number
    put:
      summary: Update specific bottle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bottleUpdateDTO"
      responses:
        200:
          description: Updating a bottle
          content:
            application/*:
              # response schema
              schema:
                $ref: "#/components/schemas/bottleDTO"
        400:
          description: Message body was empty
          content:
            application/*:
              schema:
                $ref: "#/components/schemas/errorMessage"
        404:
          description: Not found