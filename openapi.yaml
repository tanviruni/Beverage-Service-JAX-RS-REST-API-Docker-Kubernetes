openapi: 3.0.1
info:
  title: Sample API
  description: API description in Markdown.
  version: "1.0.0-oas3"
servers:
  - url: 'http://localhost:9999/v1'
components:
  schemas:
    bottleDTO:
      type: object
      required:
        - name
      properties:
        id:
          type: number
        name:
          type: string
        isAlcoholic:
          type: boolean
        volumePercent:
          type: number
        price:
          type: number
        supplier:
          type: string
        inStock:
          type: number
    CrateDTO:
      type: object
      properties:
        id:
          type: number
        bottle:
          type: object
        noOfBottles:
          type: number
        price:
          type: number
        inStock:
          type: number
paths:
  /beverage/bottles:
    get:
      summary: Get all bottles (no pagination)
      responses:
        '200':
          description: Get all bottles without pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bottleDTO'
    post:
      summary: add a bottle
      parameters: []
      responses:
        '201':
          description: Created  new beverage bottle
        '400':
          description: Message body was empty
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bottleDTO'

  /beverage/editBottle/{bottle-id}:
    parameters:
      - name: bottle-id
        required: true
        in: path
        schema:
          type: number
    put:
      summary: edit a bottle
      parameters: []
      responses:
        '201':
          description: Updated bottle
          content:
            application/*:
              # response schema
              schema:
                $ref: '#/components/schemas/bottleDTO'
        '400':
          description: Message body was empty
          content:
            application/*:
              # response schema
              schema:
                $ref: '#/components/schemas/bottleDTO'
        '404':
          description: Not found

  /beverage/editCrate/{crate-id}:
    parameters:
      - name: crate-id
        required: true
        in: path
        schema:
          type: number
    put:
      summary: edit a crate
      parameters: []
      responses:
        '201':
          description: Updated crate
          content:
            application/*:
              # response schema
              schema:
                $ref: '#/components/schemas/CrateDTO'
        '400':
          description: Message body was empty
          content:
            application/*:
              # response schema
              schema:
                $ref: '#/components/schemas/CrateDTO'
        '404':
          description: Not found




  /beverage/crates:
    get:
      summary: Get all crates (no pagination)
      responses:
        '200':
          description: Get all crates without pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrateDTO'
    post:
      summary: Add a crate
      parameters: []
      responses:
        '201':
          description: Created  new beverage crate
        '400':
          description: Message body was empty
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrateDTO'
    put:
      summary: Edit a crate
      parameters: []
      responses:
        '201':
          description: Updated crate
        '400':
          description: Message body was empty
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrateDTO'